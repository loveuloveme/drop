{"version":3,"sources":["components/Drop/index.js","components/App/index.js","index.js"],"names":["MULTIPLIER","Drop","data","volume","angle","pathRef","useRef","floorRef","useState","svgSize","setSvgSize","useEffect","width","current","getBBox","height","dFloor","d","dataX","x","dataY","y","forEach","index","minX","Math","min","apply","minY","realMinX","max","realMaxX","realMaxY","abs","dFloorY","length","className","id","patternUnits","patternTransform","x1","x2","y2","stroke","stroke-width","markerWidth","markerHeight","refX","refY","orient","points","OverlayTrigger","placement","overlay","Tooltip","class","cx","cy","r","fill","strokeWidth","ref","y1","marker-end","strokeDasharray","style","left","bottom","toFixed","right","transform","top","App","setVolume","setAngle","inputVolume","setInputVolume","inputAngle","setInputAngle","loading","setLoading","setData","getData","fetch","then","res","json","result","console","log","err","Container","fluid","Row","Col","xs","Form","Group","as","value","onChange","e","target","disabled","Control","parseInt","variant","Button","size","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e42f56d3.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useRef } from 'react';\r\n\r\nimport { Form, Col, Row, OverlayTrigger, Tooltip, Button, Container } from 'react-bootstrap';\r\n\r\nimport './index.scss';\r\n\r\nconst MULTIPLIER = 100000;\r\nconst FLOOR_HEIGHT = 30;\r\n\r\nfunction Drop({data, volume, angle}){\r\n    const pathRef = useRef();\r\n    const floorRef = useRef();\r\n\r\n    const [svgSize, setSvgSize] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(data == null) return;\r\n\r\n        setSvgSize({\r\n            width: pathRef.current.getBBox().width + 200,\r\n            height: pathRef.current.getBBox().height+floorRef.current.getBBox().height + 110\r\n        });\r\n    }, [data]);\r\n\r\n    let d = \"M \";\r\n    let dFloor = \"\";\r\n\r\n    if(data == null){\r\n        return <></>\r\n    }\r\n\r\n    \r\n\r\n    let dataX = [...data.x];\r\n    let dataY = [...data.y];\r\n\r\n    dataX.forEach((x, index) => {\r\n        dataX[index] *= MULTIPLIER;\r\n        dataY[index] *= MULTIPLIER;\r\n    });\r\n\r\n\r\n    var minX = Math.min.apply(Math, dataX);\r\n    var minY = Math.min.apply(Math, dataY);\r\n    var maxX = Math.max.apply(Math, dataX);\r\n    var maxY = Math.max.apply(Math, dataY);\r\n\r\n    var realMinX = Math.min.apply(Math, data.x);\r\n    var realMinY = Math.min.apply(Math, data.y);\r\n    var realMaxX = Math.max.apply(Math, data.x);\r\n    var realMaxY = Math.max.apply(Math, data.y);\r\n\r\n    dataX.forEach((x, index) => {\r\n        dataX[index] += Math.abs(minX) + 100;\r\n        dataY[index] += Math.abs(minY)+FLOOR_HEIGHT;\r\n    });\r\n\r\n    dataX.forEach((x, index) => {\r\n        d += `${x} ${dataY[index]} `\r\n    })\r\n\r\n    let dFloorY = dataY[0];\r\n    dFloor = `M ${dataX[0] - 100} ${dFloorY} ${dataX[dataX.length - 1] + 100} ${dFloorY}\r\n     ${dataX[dataX.length - 1] + 100} ${dFloorY - FLOOR_HEIGHT} ${dataX[0] - 100} ${dFloorY - FLOOR_HEIGHT} ${dataX[0] - 100} ${dFloorY}`\r\n\r\n    return(\r\n        <div className=\"drop\">\r\n            <div className=\"drop-svg-wrapper\">\r\n                <div className=\"drop-liquid-name\">вода</div>\r\n                <div className=\"drop-svg\">\r\n                    <svg {...svgSize}>\r\n                        \r\n                        <defs>\r\n                            <pattern id=\"pattern\" patternUnits=\"userSpaceOnUse\" width=\"31\" height=\"31\" patternTransform=\"rotate(45)\">\r\n                                <line x1=\"20\" y=\"0\" x2=\"20\" y2=\"31\" stroke=\"#000000\" stroke-width=\"30\" />\r\n                                <line x1=\"0\" y=\"0\" x2=\"0\" y2=\"31\" stroke=\"#F1C40F\" stroke-width=\"30\" />\r\n                            </pattern>\r\n\r\n                            <marker id=\"arrowhead\" markerWidth=\"5\" markerHeight=\"3\" refX=\"0\" refY=\"1.5\" orient=\"auto\">\r\n                                <polygon points=\"0 0, 5 1.5, 0 3\" />\r\n                            </marker>\r\n                        </defs>\r\n                        \r\n                        <OverlayTrigger\r\n                            placement={\"top\"}\r\n                            overlay={\r\n                                <Tooltip>\r\n                                    Угол смачивания\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <circle class=\"drop-angle\" cx={dataX[0]} cy={dataY[0]} r=\"30\" fill=\"#ffffff\" stroke=\"#000000\" strokeWidth=\"3px\" />\r\n                        </OverlayTrigger>\r\n\r\n                        <path class=\"drop-path\" d={d} stroke=\"black\" strokeWidth=\"3px\" fill=\"#ffffff\" ref={pathRef}/>\r\n                        <OverlayTrigger\r\n                            placement={\"bottom\"}\r\n                            overlay={\r\n                                <Tooltip>\r\n                                    Горизонтальная плоскость\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <path class=\"drop-floor\" d={dFloor} stroke=\"none\" fill= \"url(#pattern)\" ref={floorRef} />\r\n                        </OverlayTrigger>\r\n\r\n                        <line x1=\"50%\" y1=\"30\" x2=\"50%\" y2={svgSize.height - 25} stroke=\"RGBA(0,0,0,0.8)\" stroke-width=\"4px\" marker-end=\"url(#arrowhead)\" strokeDasharray=\"10\"/>\r\n                        <line x1=\"0\" y1={svgSize.height - 110} x2=\"100%\" y2={svgSize.height - 110} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\"   strokeDasharray=\"10\"/>\r\n                        <line x1=\"100\" y1={30} x2=\"100\" y2={svgSize.height} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\" strokeDasharray=\"10\"/>\r\n                        <line x1={svgSize.width - 100} y1={30} x2={svgSize.width - 100} y2={svgSize.height} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\" strokeDasharray=\"10\"/>\r\n\r\n                        <line x1={svgSize.width} y1={30} x2={25} y2={30} stroke=\"RGBA(0,0,0,0.8)\" stroke-width=\"4px\" strokeDasharray=\"10\" marker-end=\"url(#arrowhead)\"/>\r\n                    </svg>\r\n                    <div className=\"drop-pos-text\" style={{left: \"calc(50%)\", bottom: \"-40px\"}}>0</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"100px\", bottom: \"-40px\"}}>{(realMinX*1000).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{right: \"100px\", bottom: \"-40px\", transform: \"translate(50%)\"}}>{(realMaxX*1000).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"45px\", top: \"80px\"}}>{(realMaxY*1000/2).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{right: \"0px\", bottom: \"40px\"}}>X</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"calc(50% + 15px)\", top: \"0px\"}}>Y</div>\r\n                    <div className=\"drop-angle-text\">{180 - angle}°</div>\r\n                    <div className=\"drop-info\">{volume} наноЛ</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Drop;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nimport { Form, Col, Row, OverlayTrigger, Tooltip, Button, Container } from 'react-bootstrap';\n\nimport './index.scss';\n\nimport Drop from '../Drop';\n\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport { useCallback } from 'react';\n\nfunction App(){\n    const [volume, setVolume] = useState(46);\n    const [angle, setAngle] = useState(54);\n\n    const [inputVolume, setInputVolume] = useState(46);\n    const [inputAngle, setInputAngle] = useState(54);\n\n    const [loading, setLoading] = useState(false);\n\n    const [data, setData] = useState(null);\n\n    const getData = () => {\n        setLoading(true);\n\n        fetch(`https://drop-solver.herokuapp.com/?volume=${inputVolume}&angle=${inputAngle}`)\n        .then(res => res.json())\n        .then(result => {\n            setLoading(false);\n\n            setVolume(inputVolume);\n            setAngle(inputAngle);\n\n            console.log(result);\n            if(!result.err){\n                setData(result.data);\n            }\n        });\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <Container fluid className=\"App\">\n            <Row>\n                <Col xs=\"8\" className=\"disable-padding\">\n                    <Drop data={data} volume={volume} angle={angle}/>\n                </Col>\n                <Col xs=\"4\" className=\"disable-padding\">\n                    <div className=\"info\">\n                        <h2>Форма капли <span>жидкости</span></h2>\n\n                        <div className=\"info-input\">\n                            <Form>\n                                <Form.Group as={Row}>\n                                    <OverlayTrigger\n                                        placement={\"left\"}\n                                        overlay={\n                                            <Tooltip>\n                                                Значение объёма капли\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <Col xs=\"12\">\n                                            <div className=\"info-input-name\">Объём капли<span>наноЛ</span></div>\n                                        </Col>\n                                    </OverlayTrigger>\n                                    <Col xs=\"1\">\n                                        <h3>V</h3>\n                                    </Col>\n                                    <Col xs=\"8\">\n                                        <RangeSlider\n                                            value={inputVolume}\n                                            onChange={e => setInputVolume(e.target.value)}\n                                            disabled={loading}\n                                        />\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Control disabled={loading} value={inputVolume} onChange={e => {\n                                            if(parseInt(e.target.value) && parseInt(e.target.value) <= 100){\n                                                setInputVolume(parseInt(e.target.value));\n                                            }else{\n                                                setInputVolume(inputVolume);\n                                            }\n                                        }}/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row}>\n                                    <OverlayTrigger\n                                        placement={\"left\"}\n                                        overlay={\n                                            <Tooltip>\n                                                Значение угла смачивания\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <Col xs=\"12\">\n                                            <div className=\"info-input-name\">Угол смачивания<span>рад</span></div>\n                                        </Col>\n                                    </OverlayTrigger>\n                                    <Col xs=\"1\">\n                                        <h3>φ</h3>\n                                    </Col>\n                                    <Col xs=\"8\">\n                                        <RangeSlider\n                                            value={inputAngle}\n                                            variant='danger'\n                                            onChange={e => setInputAngle(e.target.value)}\n                                            min={10}\n                                            max={180}\n                                            disabled={loading}\n                                        />\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Control disabled={loading} value={inputAngle} onChange={e => {\n                                            if(parseInt(e.target.value) && parseInt(e.target.value) <= 180){\n                                                setInputAngle(parseInt(e.target.value));\n                                            }else{\n                                                setInputAngle(inputAngle);\n                                            }\n                                        }}/>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                            <Button variant=\"primary\" size=\"lg\" onClick={getData} disabled={loading}>\n                                Рассчитать\n                            </Button>\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n            \n\n            \n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}