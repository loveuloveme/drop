{"version":3,"sources":["components/Drop/index.js","components/App/index.js","index.js"],"names":["MULTIPLIER","Drop","data","volume","angle","liquid","pathRef","useRef","floorRef","useState","svgSize","setSvgSize","useEffect","width","current","getBBox","height","dFloor","d","dataX","x","dataY","y","forEach","index","minX","Math","min","apply","minY","realMinX","max","realMaxX","realMaxY","abs","dFloorY","length","className","style","color","name","id","patternUnits","patternTransform","x1","x2","y2","stroke","stroke-width","markerWidth","markerHeight","refX","refY","orient","points","OverlayTrigger","placement","overlay","Tooltip","class","cx","cy","r","fill","strokeWidth","ref","y1","marker-end","strokeDasharray","left","bottom","toFixed","right","transform","top","liquids","rho","App","setVolume","setAngle","setLiquid","inputVolume","setInputVolume","inputAngle","setInputAngle","inputLiquid","setInputLiquid","loading","setLoading","setData","getData","fetch","then","res","json","result","console","log","err","Container","fluid","Row","Col","xs","map","item","onClick","Form","Group","as","value","onChange","e","target","disabled","Control","parseInt","variant","Button","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd070e23.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { useRef } from 'react';\r\n\r\nimport { Form, Col, Row, OverlayTrigger, Tooltip, Button, Container } from 'react-bootstrap';\r\n\r\nimport './index.scss';\r\n\r\nconst MULTIPLIER = 100000;\r\nconst FLOOR_HEIGHT = 30;\r\n\r\nfunction Drop({data, volume, angle, liquid}){\r\n    const pathRef = useRef();\r\n    const floorRef = useRef();\r\n\r\n    const [svgSize, setSvgSize] = useState({});\r\n\r\n    useEffect(() => {\r\n        if(data == null) return;\r\n\r\n        setSvgSize({\r\n            width: pathRef.current.getBBox().width + 200,\r\n            height: pathRef.current.getBBox().height+floorRef.current.getBBox().height + 110\r\n        });\r\n    }, [data]);\r\n\r\n    let d = \"M \";\r\n    let dFloor = \"\";\r\n\r\n    if(data == null){\r\n        return <></>\r\n    }\r\n\r\n    \r\n\r\n    let dataX = [...data.x];\r\n    let dataY = [...data.y];\r\n\r\n    dataX.forEach((x, index) => {\r\n        dataX[index] *= MULTIPLIER;\r\n        dataY[index] *= MULTIPLIER;\r\n    });\r\n\r\n\r\n    var minX = Math.min.apply(Math, dataX);\r\n    var minY = Math.min.apply(Math, dataY);\r\n    var maxX = Math.max.apply(Math, dataX);\r\n    var maxY = Math.max.apply(Math, dataY);\r\n\r\n    var realMinX = Math.min.apply(Math, data.x);\r\n    var realMinY = Math.min.apply(Math, data.y);\r\n    var realMaxX = Math.max.apply(Math, data.x);\r\n    var realMaxY = Math.max.apply(Math, data.y);\r\n\r\n    dataX.forEach((x, index) => {\r\n        dataX[index] += Math.abs(minX) + 100;\r\n        dataY[index] += Math.abs(minY)+FLOOR_HEIGHT;\r\n    });\r\n\r\n    dataX.forEach((x, index) => {\r\n        d += `${x} ${dataY[index]} `\r\n    })\r\n\r\n    let dFloorY = dataY[0];\r\n    dFloor = `M ${dataX[0] - 100} ${dFloorY} ${dataX[dataX.length - 1] + 100} ${dFloorY}\r\n     ${dataX[dataX.length - 1] + 100} ${dFloorY - FLOOR_HEIGHT} ${dataX[0] - 100} ${dFloorY - FLOOR_HEIGHT} ${dataX[0] - 100} ${dFloorY}`\r\n\r\n    return(\r\n        <div className=\"drop\">\r\n            <div className=\"drop-svg-wrapper\">\r\n                <div className=\"drop-liquid-name\" style={{color: liquid.color}}>{liquid.name}</div>\r\n                <div className=\"drop-svg\">\r\n                    <svg {...svgSize}>\r\n                        \r\n                        <defs>\r\n                            <pattern id=\"pattern\" patternUnits=\"userSpaceOnUse\" width=\"31\" height=\"31\" patternTransform=\"rotate(45)\">\r\n                                <line x1=\"20\" y=\"0\" x2=\"20\" y2=\"31\" stroke=\"#000000\" stroke-width=\"30\" />\r\n                                <line x1=\"0\" y=\"0\" x2=\"0\" y2=\"31\" stroke=\"#F1C40F\" stroke-width=\"30\" />\r\n                            </pattern>\r\n\r\n                            <marker id=\"arrowhead\" markerWidth=\"5\" markerHeight=\"3\" refX=\"0\" refY=\"1.5\" orient=\"auto\">\r\n                                <polygon points=\"0 0, 5 1.5, 0 3\" />\r\n                            </marker>\r\n                        </defs>\r\n                        \r\n                        <OverlayTrigger\r\n                            placement={\"top\"}\r\n                            overlay={\r\n                                <Tooltip>\r\n                                    Угол смачивания\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <circle class=\"drop-angle\" cx={dataX[0]} cy={dataY[0]} r=\"30\" fill=\"#ffffff\" stroke=\"#000000\" strokeWidth=\"3px\" />\r\n                        </OverlayTrigger>\r\n\r\n                        <path class=\"drop-path\" d={d} stroke=\"black\" strokeWidth=\"3px\" fill=\"#ffffff\" ref={pathRef}/>\r\n                        <OverlayTrigger\r\n                            placement={\"bottom\"}\r\n                            overlay={\r\n                                <Tooltip>\r\n                                    Горизонтальная плоскость\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <path class=\"drop-floor\" d={dFloor} stroke=\"none\" fill= \"url(#pattern)\" ref={floorRef} />\r\n                        </OverlayTrigger>\r\n\r\n                        <line x1=\"50%\" y1=\"30\" x2=\"50%\" y2={svgSize.height - 25} stroke=\"RGBA(0,0,0,0.8)\" stroke-width=\"4px\" marker-end=\"url(#arrowhead)\" strokeDasharray=\"10\"/>\r\n                        <line x1=\"0\" y1={svgSize.height - 110} x2=\"100%\" y2={svgSize.height - 110} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\"   strokeDasharray=\"10\"/>\r\n                        <line x1=\"100\" y1={30} x2=\"100\" y2={svgSize.height} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\" strokeDasharray=\"10\"/>\r\n                        <line x1={svgSize.width - 100} y1={30} x2={svgSize.width - 100} y2={svgSize.height} stroke=\"RGBA(0,0,0,0.2)\" stroke-width=\"4px\" strokeDasharray=\"10\"/>\r\n\r\n                        <line x1={svgSize.width} y1={30} x2={25} y2={30} stroke=\"RGBA(0,0,0,0.8)\" stroke-width=\"4px\" strokeDasharray=\"10\" marker-end=\"url(#arrowhead)\"/>\r\n                    </svg>\r\n                    <div className=\"drop-pos-text\" style={{left: \"calc(50%)\", bottom: \"-40px\"}}>0</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"100px\", bottom: \"-40px\"}}>{(realMinX*1000).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{right: \"100px\", bottom: \"-40px\", transform: \"translate(50%)\"}}>{(realMaxX*1000).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"45px\", top: \"80px\"}}>{(realMaxY*1000/2).toFixed(5)} мм</div>\r\n                    <div className=\"drop-pos-text\" style={{right: \"0px\", bottom: \"40px\"}}>X</div>\r\n                    <div className=\"drop-pos-text\" style={{left: \"calc(50% + 15px)\", top: \"0px\"}}>Y</div>\r\n                    <div className=\"drop-angle-text\">{180 - angle}°</div>\r\n                    <div className=\"drop-info\">{volume} наноЛ</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Drop;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\n\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nimport { Form, Col, Row, OverlayTrigger, Tooltip, Button, Container } from 'react-bootstrap';\n\nimport './index.scss';\n\nimport Drop from '../Drop';\n\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport { useCallback } from 'react';\n\n\nlet liquids = [\n    {\n        name: 'вода',\n        rho: 1000,\n        color: '#52a9e3'\n    },\n    {\n        name: 'глицерин',\n        rho: 1260,\n        color: '#95a5a6'\n    },\n    {\n        name: 'нефть',\n        rho: 550,\n        color: '#34495e'\n    },\n    // {\n    //     name: 'ртуть',\n    //     rho: 13600,\n    //     color: '#7f8c8d'\n    // },\n    // {\n    //     name: 'диэтиловый эфир',\n    //     rho: 714,\n    //     color: '#9b59b6'\n    // },\n    // {\n    //     name: 'ацетон',\n    //     rho: 792,\n    //     color: '#2ecc71'\n    // }\n];\n\nfunction App(){\n    const [volume, setVolume] = useState(46);\n    const [angle, setAngle] = useState(54);\n    const [liquid, setLiquid] = useState(0);\n\n    const [inputVolume, setInputVolume] = useState(46);\n    const [inputAngle, setInputAngle] = useState(54);\n    const [inputLiquid, setInputLiquid] = useState(0);\n\n    const [loading, setLoading] = useState(false);\n\n    const [data, setData] = useState(null);\n\n    const getData = () => {\n        setLoading(true);\n\n        fetch(`https://drop-solver.herokuapp.com/?volume=${inputVolume}&angle=${inputAngle}&rho=${liquids[inputLiquid].rho}`)\n        .then(res => res.json())\n        .then(result => {\n            console.log(result);\n            setLoading(false);\n\n            setVolume(inputVolume);\n            setAngle(inputAngle);\n            setLiquid(inputLiquid);\n\n            if(!result.err){\n                setData(result.data);\n            }\n        });\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <Container fluid className=\"App\">\n            <Row>\n                <Col xs=\"8\" className=\"disable-padding\">\n                    <Drop data={data} volume={volume} angle={angle} liquid={liquids[liquid]}/>\n                </Col>\n                <Col xs=\"4\" className=\"disable-padding\">\n                    <div className=\"info\">\n                        <h2>Форма капли <span>жидкости</span></h2>\n\n                        <div className=\"info-input\">\n                            <div className=\"info-input-liquid-wrapper\">\n                                {\n                                    liquids.map((item, index) => {\n                                        return (\n                                            <div\n                                                className={\"info-input-liquid-item \"+(inputLiquid == index ? 'selected' : '')}\n                                                onClick={() => {\n                                                    setInputLiquid(index);\n                                                }}\n                                            >\n                                                <div className=\"info-input-liquid-item__name\" style={{color: item.color}}>{item.name}</div>\n                                                <div className=\"info-input-liquid-item__rho\">{item.rho} <span>кг/м<span>3</span></span></div>\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </div>\n                            <Form>\n                                <Form.Group as={Row}>\n                                    <OverlayTrigger\n                                        placement={\"left\"}\n                                        overlay={\n                                            <Tooltip>\n                                                Значение объёма капли\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <Col xs=\"12\">\n                                            <div className=\"info-input-name\">Объём капли<span>наноЛ</span></div>\n                                        </Col>\n                                    </OverlayTrigger>\n                                    <Col xs=\"1\">\n                                        <h3>V</h3>\n                                    </Col>\n                                    <Col xs=\"8\">\n                                        <RangeSlider\n                                            value={inputVolume}\n                                            onChange={e => setInputVolume(e.target.value)}\n                                            disabled={loading}\n                                        />\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Control disabled={loading} value={inputVolume} onChange={e => {\n                                            if(parseInt(e.target.value) && parseInt(e.target.value) <= 100){\n                                                setInputVolume(parseInt(e.target.value));\n                                            }else{\n                                                setInputVolume(inputVolume);\n                                            }\n                                        }}/>\n                                    </Col>\n                                </Form.Group>\n\n                                <Form.Group as={Row}>\n                                    <OverlayTrigger\n                                        placement={\"left\"}\n                                        overlay={\n                                            <Tooltip>\n                                                Значение угла смачивания\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <Col xs=\"12\">\n                                            <div className=\"info-input-name\">Угол смачивания<span>рад</span></div>\n                                        </Col>\n                                    </OverlayTrigger>\n                                    <Col xs=\"1\">\n                                        <h3>φ</h3>\n                                    </Col>\n                                    <Col xs=\"8\">\n                                        <RangeSlider\n                                            value={inputAngle}\n                                            variant='danger'\n                                            onChange={e => setInputAngle(e.target.value)}\n                                            min={10}\n                                            max={180}\n                                            disabled={loading}\n                                        />\n                                    </Col>\n                                    <Col xs=\"3\">\n                                        <Form.Control disabled={loading} value={inputAngle} onChange={e => {\n                                            if(parseInt(e.target.value) && parseInt(e.target.value) <= 180){\n                                                setInputAngle(parseInt(e.target.value));\n                                            }else{\n                                                setInputAngle(inputAngle);\n                                            }\n                                        }}/>\n                                    </Col>\n                                </Form.Group>\n                            </Form>\n                            <Button variant=\"primary\" size=\"lg\" onClick={getData} disabled={loading}>\n                                Рассчитать\n                            </Button>\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n            \n\n            \n        </Container>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}